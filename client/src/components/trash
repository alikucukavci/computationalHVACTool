//ThreeJS first version

// import React, { useState, useEffect} from 'react'
// import Files from "react-files";
// import axios from "axios"
// const Home = () => {
    
//     const [jsonFile, setFile] = useState({})

    
//     useEffect(() => {
//         axios
//         .post("/projects", {
//           file: jsonFile
//         })
//         .then(() => {
//           console.log("MongoDB is working")
//           })
//         .catch(err => {
//           console.log(err);
//         });
//         console.log(jsonFile)


//     }, [jsonFile])

//     let fileReader = new FileReader()
//     fileReader.onload = event => {
//         setFile(JSON.parse(event.target.result));
//     };

    
//     return (
//       <div className="files">
//         <Files
//           className="files-dropzone btn-danger"
//           onChange={file => {
//             fileReader.readAsText(file[0]);
//           }}
//           onError={err => console.log(err)}
//           accepts={[".json"]}
//           multiple
//           maxFiles={3}
//           maxFileSize={10000000}
//           minFileSize={0}
//           clickable
//         >
//           Drop files here or click to upload
//         </Files>
//       </div>
//     );
// }
// export default Home



import React, { Component } from 'react'
import * as THREE from 'three';
import OrbitControls from "three-orbitcontrols"
import { Interaction } from "three.interaction"
import { Popover, OverlayTrigger, Button} from "react-bootstrap";


const data = {
	"rooms": [{
			"roomName": "Class room",
			"roomNumber": "3",
			"roomVolume": "50",
			"roomArea": "25",
			"size": {
				"x": "3",
				"y": "3",
				"z": "3"
			},
			"position": {
				"x": "0",
				"y": "0",
				"z": "0"
			}
		},
		{
			"roomName": "Auditorium",
			"roomNumber": "1",
			"roomVolume": "250",
			"roomArea": "100",
			"size": {
				"x": "7",
				"y": "3",
				"z": "7"
			},
			"position": {
				"x": "5",
				"y": "0",
				"z": "-2"
			}
		},

	]
}



// for (let i=0; i <data.rooms.length; i++){
//      console.log(data.rooms[i])
//      console.log(data.rooms[i].position.x)

//      }

export default class ThreeJS extends Component {
  state = {
    popup: false,
    id: "",
    roomName: "",
    roomNumber: 0,
    roomVolume: 0,
    roomArea: 0,
    roomAHU: 0,
    roomAirflow: 0,

  }

  componentDidMount(){
    // const width = this.mount.clientWidth
    // const height = this.mount.clientHeight
    //ADD SCENE
    this.scene = new THREE.Scene()
    //ADD CAMERA
    this.camera = new THREE.PerspectiveCamera(
      20,
      window.innerWidth / window.innerHeight,
      20,
      1000
    );
    
    this.camera.position.z = 100
    //ADD RENDERER
    this.renderer = new THREE.WebGLRenderer({ antialias: true })
    this.renderer.setClearColor('#000000')
    this.renderer.setSize(window.innerWidth, window.innerHeight)
    this.mount.appendChild(this.renderer.domElement)
    //ADD Control to the renderer
    this.controls = new OrbitControls(this.camera, this.renderer.domElement)

    // ADD interaction
    this.interaction = new Interaction(this.renderer, this.scene, this.camera);
    
    
    //Magic
    const cubeArr = []
    for (let i=0; i <data.rooms.length; i++){
      //ADD GEOMETRY
      let geometry = new THREE.BoxGeometry(data.rooms[i].size.x, data.rooms[i].size.y, data.rooms[i].size.z);
      //ADD MATERIAL
      let material = new THREE.MeshLambertMaterial({ color: 'red' });
      //ADD ARRAY OF MESHES
      cubeArr.push(new THREE.Mesh(geometry, material)) 
      
     }

    for (let i = 0; i < cubeArr.length; i++){
      
      //ADD POSITION 
      cubeArr[i].position.set(data.rooms[i].position.x, data.rooms[i].position.y, data.rooms[i].position.z);

      //ADD PROPERTIES
      cubeArr[i].AHU = 0;
      cubeArr[i].Name = data.rooms[i].roomName;
      cubeArr[i].Number = data.rooms[i].roomNumber;  
      cubeArr[i].Volume = data.rooms[i].roomVolume; 
      cubeArr[i].Area = data.rooms[i].roomArea;  
      cubeArr[i].AHU = 0;  
      cubeArr[i].Airflow = 0;  

      cubeArr[i].cursor = 'pointer';

      cubeArr[i].on('click', (ev) => {
      this.setState({
        popup: !this.state.popup,
        id: ev.target.uuid,
        roomName: ev.target.Name,
        roomNumber: ev.target.Number,
        roomVolume: ev.target.Volume,
        roomArea: ev.target.Area


      },()=>console.log("state update:",this.state))
    });



      this.scene.add(cubeArr[i]);

      console.log(cubeArr[i])
    }
    
    //ADD POPUP REFERENCE
    this.popup = false
    
    
    
    //ADD geometry
    
    // const geometry = new THREE.BoxGeometry(3, 3, 3)
    // const geometry1 = new THREE.BoxGeometry(7, 3, 7)
    // //ADD material  
    // const material = new THREE.MeshLambertMaterial({ color: '#0xF3FFE2'})
    // const material1 = new THREE.MeshLambertMaterial({ color: '#007BFF'     })
    
    // //ADD geometry and material to a mesh
    // this.cube = new THREE.Mesh(geometry, material)
    // this.cube1 = new THREE.Mesh(geometry1, material1)  
    
    // //ADD property to cube
    // this.cube.AHU = 0;
    // this.cube.Name = "Class room";  //Needs to be changed when JSON
    // this.cube.Number = 3;  //Needs to be changed when JSON
    // this.cube.Volume = 50; 
    // this.cube.Area = 20;  
    // this.cube.AHU = 0;  
    // this.cube.Airflow = 0;  

  //   //Add position to cube
  //   this.cube.position.set(0, 0, 0);
  //   this.cube1.position.set(5, 0, -2);

  //   //Add cube to scene
  //   this.scene.add(this.cube)
  //   this.scene.add(this.cube1)

  //  //ADD pointer
  //   this.cube.cursor = 'pointer';
  //   // this.cube1.cursor = 'pointer';

  //   //ADD ONCLICK EVENT FOR POPUP
    

  //   this.cube.on('click', (ev) => {
  //     // console.log(ev.target)
  //     // console.log("clicked", this.popup)
  //     this.setState({
  //       popup: !this.state.popup,
  //       id: ev.target.uuid,
  //       roomName: ev.target.Name,
  //       roomNumber: ev.target.Number,
  //       roomVolume: ev.target.Volume

  //     },()=>console.log("state update:",this.state))
  //   });

     //Add ambient light
     this.lightAmbient = new THREE.AmbientLight(0xffffff, 0.5);
    //Add ambient light to scene
    this.scene.add(this.lightAmbient)

    // //Add pointlight
    // this.lightPoint = new THREE.PointLight(0xffffff, 0.5);
    // //Add point light to scene
    // this.scene.add(this.lightPoint)

    //Add ambient light
    this.sunLight = new THREE.DirectionalLight(0xffffff, 2.0, 1000);
    //Add ambient light to scene
    this.scene.add(this.sunLight)
    // Add interactions

    // this.cube1.on('click', (ev) => {
    //   console.log(ev.target)
    //   console.log("clicked", this.popup)
    //   this.setState({
    //     popup: !this.state.popup,
    //     id:ev.target.uuid
    //   },()=>console.log("state update:",this.state))
    // });
    
    
    
// this.cube.on('touchstart', function(ev) {});
// this.cube.on('touchcancel', function(ev) {});
// this.cube.on('touchmove', function(ev) {});
// this.cube.on('touchend', function(ev) {});
// this.cube.on('mousedown', function(ev) {});
// this.cube.on('mouseout', function(ev) {});
// this.cube.on('mouseover', function(ev) {});
// this.cube.on('mousemove', function(ev) {});
//     this.cube.on('mouseup', function (ev) { });
    
    // this.scene.on('touchstart', ev => {
    //   console.log("ev");
    // })
    // this.scene.on('touchmove', ev => {
    //   console.log("ev");
    // })

this.start()
  }

  closePopup = (ev) => {
    this.setState({
        popup: !this.state.popup,
      })
  }

  handleChange = event => {
    const { name, value } = event.target;
    this.setState({ [name]: value });
  };

  
componentWillUnmount(){
    this.stop()
    this.mount.removeChild(this.renderer.domElement)
  }
start = () => {
    if (!this.frameId) {
      this.frameId = requestAnimationFrame(this.animate)
    }
  }
stop = () => {
    cancelAnimationFrame(this.frameId)
  }
animate = () => {
  //  this.cube.rotation.x += 0.01
  // this.cube.rotation.y += 0
  // this.cube1.rotation.x -= 0.01
  //  this.cube1.rotation.y += 0
   this.renderScene()
   this.frameId = window.requestAnimationFrame(this.animate)
 }
renderScene = () => {
  this.renderer.render(this.scene, this.camera)
  }
  
  
  render() {

  return (
      <div>
      {this.state.popup && 
        <>
        <div className="popup" id="exampleModalScrollable" tabIndex="-1" role="dialog" aria-labelledby="exampleModalScrollableTitle" aria-hidden="true">
        
        <div className="modal-dialog modal-dialog-centered" role="document">
        <div className="modal-content">
        <div className="modal-header">
                <h5 className="modal-title" id="exampleModalCenterTitle">{this.state.roomName} {this.state.roomNumber}</h5>
        <button type="button" onClick={()=>this.closePopup()} className="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
        </button>
        </div>
        <div className="modal-body">
                <div>Volume: {this.state.roomVolume} m3</div>
                <div>Area: {this.state.roomArea} m3</div>
                <div> <div> AHU-VE {this.state.roomAHU}</div> <input type="number" name="roomAHU" value={this.state.roomAHU===0?"":this.state.roomAHU} onChange={this.handleChange} /> </div>
                <div><div>Airflow {this.state.roomAirflow} </div> <input type="number" name="roomAirflow" value={this.state.roomAirflow===0?"":this.state.roomAirflow} onChange={this.handleChange}/> </div>

        </div>
        <div className="modal-footer">
        <button type="button" className="btn btn-primary">Save changes</button>
        </div>
        </div>
        </div>
        </div>
        <div className="transparent-background">
        </div>
        </>
      } 
      
      <div
     
        style={{ width: '400px', height: '400px' }}
          ref={(mount) => { this.mount = mount }}
          
        
      >
</div>
    
      
      </div>
    )
  }
}